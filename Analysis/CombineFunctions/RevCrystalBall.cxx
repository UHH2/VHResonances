/*****************************************************************************
* Project: RooFit                                                           *
*                                                                           *
* This code was autogenerated by RooClassFactory                            *
*****************************************************************************/

// Your description goes here...

#include "Riostream.h"

#include "HiggsAnalysis/CombinedLimit/interface/RevCrystalBall.hpp"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include <math.h>
#include "TMath.h"

ClassImp(RevCrystalBall)

RevCrystalBall::RevCrystalBall(const char *name, const char *title, RooAbsReal& _x, RooAbsReal& _p0, RooAbsReal& _p1, RooAbsReal& _p2, RooAbsReal& _p3) :
  RooAbsPdf(name,title), x("x","x",this,_x), p0("p0","p0",this,_p0), p1("p1","p1",this,_p1), p2("p2","p2",this,_p2), p3("p3","p3",this,_p3) {}


  RevCrystalBall::RevCrystalBall(const RevCrystalBall& other, const char* name) :  RooAbsPdf(other,name),
  x("x",this,other.x), p0("p0",this,other.p0), p1("p1",this,other.p1), p2("p2",this,other.p2), p3("p3",this,other.p3) {}

  Double_t RevCrystalBall::evaluate() const {
    Double_t std=(x-p2)/p3;
    Double_t A=pow(p1/p0, p1)*exp(-0.5*pow(p0, 2));
    Double_t B=p1/p0-p0;
    Double_t result=0;

    if (std<p0) result=exp(-0.5*pow(std, 2));
    else result=A/pow(B+std, p1);

    return result;
  }
